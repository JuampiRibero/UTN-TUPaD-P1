# Trabajo Pr√°ctico N¬∞7 - Recursividad

import sys

sys.setrecursionlimit(20000)

# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario.

def factorial(x):
  if x == 0:
    return 1
  else:
    return x * factorial(x - 1)

num = int(input("Ingresa un n√∫mero entero positivo: "))

for i in range(1, num + 1):
    print(f"Factorial de {i} es {factorial(i)}")

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci(pos):
  if pos == 0:
    return 0
  elif pos == 1:
    return 1
  else:
    return fibonacci(pos - 1) + fibonacci(pos - 2)
  
num = int(input("Ingresa la posici√≥n hasta la que deseas ver la serie de Fibonacci: "))

print("Serie de Fibonacci:")
for i in range(num + 1):
    print(f"F({i}) = {fibonacci(i)}")

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

base = float(input("Ingresa la base: "))
exponente = int(input("Ingresa el exponente (entero no negativo): "))

resultado = potencia(base, exponente)
print(f"{base}^{exponente} = {resultado}")

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(num):
    if num == 0:
        return ""
    else:
        return decimal_a_binario(num // 2) + str(num % 2)

num = int(input("Ingresa un n√∫mero entero positivo: "))

if num == 0:
    print("El n√∫mero binario es: 0")
else:
    binario = decimal_a_binario(num)
    print(f"El n√∫mero {num} en binario es: {binario}")

# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])
  
texto = input("Ingresa una palabra sin espacios ni tildes: ").lower()

if es_palindromo(texto):
    print("Es un pal√≠ndromo.")
else:
    print("No es un pal√≠ndromo.")

# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

num = int(input("Ingres√° un n√∫mero entero positivo: "))

if num > 0:
    resultado = suma_digitos(num)
    print(f"La suma de los d√≠gitos de {num} es: {resultado}")
else:
    print("Por favor, ingres√° un n√∫mero entero positivo mayor que cero.")

# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque. Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(num):
    if num == 1:
        return 1
    else:
        return num + contar_bloques(num - 1)

nivel = int(input("Ingres√° la cantidad de bloques del nivel m√°s bajo: "))

if nivel > 0:
    total = contar_bloques(nivel)
    print(f"Para construir la pir√°mide se necesitan {total} bloques en total.")
else:
    print("Por favor, ingres√° un n√∫mero entero positivo.")

# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(num, digito):
    if num == 0:
        return 0
    else:
        ultimo_digito = num % 10
        suma_actual = 1 if ultimo_digito == digito else 0
        return suma_actual + contar_digito(num // 10, digito)
      
num = int(input("Ingrese un n√∫mero entero positivo: "))

digito = int(input("Ingrese un d√≠gito entre 0 y 9: "))

if 0 <= digito <= 9 and num >= 0:
    resultado = contar_digito(num, digito)
    print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {num}.")
else:
    print("Error: Debe ingresar un n√∫mero entero positivo y un d√≠gito entre 0 y 9.")